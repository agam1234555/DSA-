class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;  // ✅ Start from 1 (Koko must eat at least 1 banana)
        int right = 0;
        
        for (int i = 0; i < piles.length; i++) {
            right = Math.max(piles[i], right);  // ✅ Find max pile size
        }

        while (left < right) {
            int mid = left + (right - left) / 2; // ✅ Correct mid calculation
            if (checkall(piles, h, mid)) {
                right = mid;  // ✅ Try lower speed
            } else {
                left = mid + 1;  // ✅ Increase speed
            }
        }
        return left;
    }

    public static boolean checkall(int piles[], int h, int speed) {
        int totalhours = 0;  // ✅ Initialize outside loop
        for (int nums : piles) {
            totalhours += (nums + speed - 1) / speed;  // ✅ Equivalent to Math.ceil(nums / speed)
        }
        return totalhours <= h;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] piles = {3, 6, 7, 11};
        int h = 8;
        System.out.println("Minimum eating speed: " + sol.minEatingSpeed(piles, h)); // Output: 4
    }
}
