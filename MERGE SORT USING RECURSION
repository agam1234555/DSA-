import java.util.Arrays;

public class MergeSort {
    // Function to merge two sorted subarrays
    static void merge(int arr[], int left, int mid, int right) {
        // Using copyOfRange to create left and right subarrays
        int L[] = Arrays.copyOfRange(arr, left, mid + 1);
        int R[] = Arrays.copyOfRange(arr, mid + 1, right + 1);

        int i = 0, j = 0, k = left;

        // Merge the two subarrays back into arr[]
        while (i < L.length && j < R.length) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of L[], if any
        while (i < L.length) {
            arr[k] = L[i];
            i++;
            k++;
        }

        // Copy remaining elements of R[], if any
        while (j < R.length) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Function to implement Merge Sort
    static void mergeSort(int arr[], int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;

            // Recursively sort first and second halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    // Main function
    public static void main(String args[]) {
        int arr[] = {38, 27, 43, 3, 9, 82, 10};
        System.out.println("Original array: " + Arrays.toString(arr));

        mergeSort(arr, 0, arr.length - 1);

        System.out.println("Sorted array: " + Arrays.toString(arr));
    }
}
